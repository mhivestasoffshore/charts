apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}
  labels:
    {{- include "common.matchLabels" . | nindent 4 }}
    {{- include "common.metaLabels" . | nindent 4 }}
data:
  config.yaml: |
    server:
      graceful_shutdown_timeout: '5s'
      http_server_idle_timeout: '120s'
      grpc_server_max_recv_msg_size: {{ .Values.config.grpc_server_max_msg_size }}
      grpc_server_max_send_msg_size: {{ .Values.config.grpc_server_max_msg_size }}
      grpc_server_max_concurrent_streams: 1000
      http_server_write_timeout: '1m'
      http_listen_port: {{ .Values.config.http_listen_port }}
    frontend:
      compress_responses: true
      max_outstanding_per_tenant: 200
      log_queries_longer_than: '5s'
    frontend_worker:
      # Limit to N/2 worker threads per frontend, as we have two frontends.
      parallelism: {{ div .Values.config.querierConcurrency 2 }}
      grpc_client_config:
        max_send_msg_size: {{ .Values.config.grpc_server_max_msg_size }}
    query_range:
      split_queries_by_interval: '30m'
      align_queries_with_step: true
      cache_results: true
      max_retries: 5
      results_cache:
        max_freshness: '10m'
        cache:
          memcached_client:
            timeout: '500ms'
            consistent_hash: true
            service: 'memcache'
            host: '{{ .Release.Name }}-memcached-frontend.{{ .Release.Namespace }}.svc.cluster.local'
            update_interval: '1m'
            max_idle_conns: 16
    limits_config:
      enforce_metric_name: false
      max_query_parallelism: 32
      reject_old_samples: true
      reject_old_samples_max_age: '168h'
      max_query_length: '12000h' # 500 days
      max_streams_per_user: 0 # Disabled in favor of the global limit
      max_global_streams_per_user: 10000 # 10k
      ingestion_rate_strategy: 'global'
      ingestion_rate_mb: 10
      ingestion_burst_size_mb: 20

    ingester:
      chunk_idle_period: '15m'
      chunk_block_size: 262144
      max_transfer_retries: 60

      lifecycler:
        ring:
          heartbeat_timeout: '1m'
          replication_factor: {{ .Values.config.replication_factor }}
          kvstore:
            store: 'consul'
            consul:
              host: '{{ .Release.Name }}-consul.{{ .Release.Namespace }}.svc.cluster.local:8500'
        num_tokens: 512
        heartbeat_period: '5s'
        join_after: '30s'

    ingester_client:
      grpc_client_config:
        max_recv_msg_size: 67108864
      remote_timeout: '1s'

    storage_config:
      index_queries_cache_config:
        memcached:
          batch_size: 100
          parallelism: 100
        memcached_client:
          host: '{{ .Release.Name }}-memcached-index-queries.{{ .Release.Namespace }}.svc.cluster.local'
          service: 'memcache'
          consistent_hash: true

      cassandra:
        addresses: {{ .Values.config.cassandra.addresses | quote }}
        keyspace: lokiindex
        replication_factor: {{ .Values.config.cassandra.replication_factor }}

      azure:
        container_name: {{ .Values.config.azure.container_name | quote }}
        account_name: {{ .Values.config.azure.account_name | quote }}
        account_key: {{ .Values.config.azure.account_key | quote }}

    chunk_store_config:
      chunk_cache_config:
        memcached:
          batch_size: 100
          parallelism: 100

        memcached_client:
          host: '{{ .Release.Name }}-memcached.{{ .Release.Namespace }}.svc.cluster.local'
          service: 'memcache'
          consistent_hash: true

      write_dedupe_cache_config:
        memcached:
          batch_size: 100
          parallelism: 100
        memcached_client:
          host: '{{ .Release.Name }}-memcached-index-writes.{{ .Release.Namespace }}.svc.cluster.local'
          service: 'memcache'
          consistent_hash: true
      max_look_back_period: '0s'

    schema_config:
      configs:
      - from: 2020-02-01
        store: 'cassandra'
        object_store: 'azure'
        schema: 'v11'
        index:
          prefix: '{{ .Release.Namespace }}_index_'
          period: '{{ .Values.config.index_period_hours }}h'

    table_manager:
      retention_period: '0s'
      retention_deletes_enabled: false
      creation_grace_period: '3h'

    distributor:
      # Creates a ring between distributors, required by the ingestion rate global limit.
      ring:
        kvstore:
          store: 'consul'
          consul:
            host: '{{ .Release.Name }}-consul.{{ .Release.Namespace }}.svc.cluster.local:8500'

  overrides.yaml: |
    overrides: {}
